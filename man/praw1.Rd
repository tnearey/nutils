% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/praw.R
\name{praw1}
\alias{praw1}
\title{Pattern (or Pseudo) raw: Approximate Python-like `raw` Strings (with warnings)}
\usage{
praw1(pat, cesc = "`")
}
\arguments{
\item{pat}{a string or character vector}

\item{cesc}{a single character(default `)  to be substituted by
double \\ in the pattern where any cescs appeared on input.
   Note this warns if `cesc` is not a single character or if it is the  special set: "([.|)\\^{}+$*?:]"}
}
\value{
the pattern with the `cesc` character replaced by two backslashes. See details.
}
\description{
Pattern (or Pseudo) raw: Approximate Python-like `raw` Strings (with warnings)
}
\details{
Literal occurrences of characters such as ([.|)\\^{}+$*?:] often need to be escaped
    in regular expression patterns. This makes them look very different than e.g.  raw string patterns.
    Thus, the equivalent of Python's
    \code{ pyPat= r'\\(\\s*\\w+\\s*\\)'}
    would have to look like:
     \code{rPat <- "\\\\(\\\\s*\\\\w+\\\\s*\\\\)"}.
     With \code{praw()} we can instead use \code{erPat <- ('`(`s*`w+`s*`)')}
     To match a literal single backslash in a string,  \code{pat <- praw('``', '`' )} is necessary, generating pat= '\\\\'.
}
\examples{
praw1('`(`s*`w+`s*`)') == "\\\\(\\\\s*\\\\w+\\\\s*\\\\)"

# Replace a\\\\b with a:b

gsub(praw1('\%\%\%\%','\%'), ":", "a\\\\\\\\b")
# or
gsub(praw("\\\\`\\\\```"), ":", "a\\\\\\\\b")

}
\seealso{
\code{\link{praw}}
}
